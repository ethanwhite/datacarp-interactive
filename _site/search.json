[
  {
    "objectID": "ggplot.html",
    "href": "ggplot.html",
    "title": "ggplot",
    "section": "",
    "text": "Warning\n\n\n\nInstalling and loading ggplot2 on webR takes a little while. The install is happening in the background. Don’t worry, once you’ve waited to load the package everything else will be quick.\n\n\n\nggplot\n\nVery popular plotting package\nGood plots quickly\nDeclarative - describe what you want not how to build it\nContrasts w/Imperative - how to build it step by step\n\n\n\nBasics\n\nLoad the package and some data\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nTo build a plot using ggplot we start with the ggplot() function\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nggplot() creates a base ggplot object that we can then add things to - like a blank canvas\nWe can also add optional arguments for information to be shared across different components of the plot\nThe two main arguments we typically use here are\ndata - which is the name of the data frame we are working with, so acacia\nmapping - which describes which columns of the data are used for different aspects of the plot\nWe create a mapping by using the aes function, which stands for “aesthetic”, and then linking columns to pieces of the plot\nWe’ll start with telling ggplot what value should be on the x and y axes\nLet’s plot the relationship betwen the circumference of an acacia and its height\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nThis still doesn’t create a figure, it’s just a blank canvas and some information on default values for data and mapping columns to pieces of the plot\nWe can add data to the plot using layers\nWe do this by adding a + after the the ggplot function and then adding something called a geom, which stands for geometry\nTo make a scatter plot we use geom_point\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nTo change things about the layer we can pass additional arguments to the geom\nWe can do things like change\n\nthe size of the points, we’ll set it to 3\nthe color of the points, we’ll set it to \"blue\"\nthe transparency of the points, which is called alpha, we’ll set it to 0.5\n\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nTry changing these values to make the graph look like you want it to\nTo add labels (like documentation for your graphs!) we use the labs function\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\n\nGrouping\n\nGroup on a single graph\nLook at influence of experimental treatment\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nTry changing the above code to color based on the gear\nWe can also split each group into different subplots (known as facets)\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nTry changing this code to create a subplot for each value in vs with points of size 4\n\n\n\n\n\n\n\nExercise\n\n\n\nMake a scatter plot with hp on the x axis and wt on the y axis. Label the x axis “Horse Power” and the y axis “Weight”. Make one subplot for each value in gear.\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\nYour result should look like the plot below\n\n\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution Code\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(mtcars, aes(x = hp, y = wt)) +\n  geom_point() +\n  labs(x = \"Horse Power\", y = \"Weight\") +\n  facet_wrap(~gear)"
  },
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "dplyr",
    "section": "",
    "text": "Introduction to tabular data\n\nWe will be working with data from the Portal Project.\nLong-term experimental study of small mammals in Arizona.\n\n\n\nPackages\n\nMain way that reusable code is shared in R\nCombination of code, data, and documentation\nR has a rich ecosystem of packages for data manipulation & analysis\nWe’ve already installed the packages for this demo\nEven if we’ve installed a package it is automatically available to do analysis with\nThis because different packages may have functions with the same names\nSo don’t want to have to worry about all of the packages we’ve installed every time we right a piece of code\nLoad all of the functions in the package:\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nLoading and viewing the dataset\n\nLets download the surveys.csv and load into R using read.csv().\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\n\n\nBasic dplyr\n\nModern data manipulation library for R\n\n\nSelect\n\nSelect a subset of columns.\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nThey can occur in any order.\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Shrub Volume Data Basics 1-2.\n\n\n\nMutate\n\nAdd new columns with calculated values using mutate()\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nIf we look at surveys now will it contain the new column?\nOpen surveys\nAll of these commands produce new values, data frames in this case\nTo store them for later use we need to assign them to a variable\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nOr we could overwrite the existing variable if we don’t need it\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Shrub Volume Data Basics 3.\n\n\n\nArrange\n\nWe can sort the data in the table using arrange\nTo sort the surveys table by by weight\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nWe can reverse the order of the sort by “wrapping” weight in another function, desc for “descending\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nWe can also sort by multiple columns, so if we wanted to sort first by plot_id and then by date\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Shrub Volume Data Basics 4.\n\n\n\nFilter\n\nUse filter() to get only the rows that meet certain criteria.\nCombine the data frame to be filtered with a series of conditional statements.\nColumn, condition, value\nTo filter the data frame to only keep the data on species DS\n\nType the name of the function, filter\nParentheses\nThe name of the data frame we want to filter, surveys\nThe column the want to filter on, species_id\nThe condition, which is == for “is equal to”\nAnd then the value, \"DS\"\nDS here is a string, not a variable or a column name, so we enclose it in quotation marks\n\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nLike with vectors we can have a condition that is “not equal to” using “!=”\nSo if we wanted the data for all species except “DS\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nWe can also filter on multiple conditions at once\nIn computing we combine conditions in two ways “and” & “or”\n“and” means that all of the conditions must be true\nDo this in dplyr using additional comma separate arguments\nSo, to get the data on species “DS” for the year 1995:\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nAlternatively we can use the & symbol, which stands for “and”\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nThis approach is mostly useful for building more complex conditions\n“or” means that one or more of the conditions must be true\nDo this using |\nTo get data on all of the Dipodomys species\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Shrub Volume Data Basics 5-7.\n\n\n\n\nFiltering null values\n\nOne of the common tasks we use filter for is removing null values from data\nBased on what we learned before it’s natural to think that we do this by using the condition weight != NA\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nWhy didn’t that work?\nNull values like NA are special\nWe don’t want to accidentally say that two “missing” things are the same\n\nWe don’t know if they are\n\nSo use special commands\nis.na() checks if the value is NA\nSo if we wanted all of the data where the weigh is NA\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nWe’ll learn more about why this works in the same way as the other conditional statements when we study conditionals in detail later in the course\nTo remove null values we combine this with ! for “not”\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nSo !is.na(weight) is conceptually the same as “weight != NA”\nIt is common to combine a null filter with other conditions using “and”\nFor example we might want all of the data on a species that contains weights\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Shrub Volume Data Basics 8."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Experimental interactive version of Data Carpentry for Biologists",
    "section": "",
    "text": "Intro to R\nVectors\nIntro to dplyr\nIntro to ggplot"
  },
  {
    "objectID": "vectors.html",
    "href": "vectors.html",
    "title": "Vectors",
    "section": "",
    "text": "Vectors Basics\n\nA vector is a sequence of values that all have the same type\nYou can create a vector using the c() function, which stands for “combine”\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nUsing the str function we learned last time shows that this is a vector of 4 character strings\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\nYou can select pieces of a vector by “slicing” the vector (like slicing a pizza). This is done using square brackets []. In general [] in R means, “give me a piece of something”.\nIf we put one number in the brackets it will us the value that position:\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\nTry changing this to get the values at different positions.\nIf we use two numbers separated by a colon this will give us all the values in the range of those numbers. For 1:3 will use us the first through third values.\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\n1:3 works by makeing a vector of the whole numbers 1 through 3.\nSo, this is the same as states[1:3] is the same as states[c(1, 2, 3)]\nYou can use a vector to get any subset or order you want states[c(4, 1, 3)]\nMany functions in R take a vector as input and return a value\nThis includes the function length which determines how many items are in a vector\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nWe can also calculate common summary statistics\nFor example, if we have a vector of population counts\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Basic Vectors.\n\n\n\nNull values\n\nSo far we’ve worked with vectors that contain no missing values\nBut most real world data has values that are missing for a variety of reasons\nFor example, kangaroo rats don’t like being caught by humans and are pretty good at escaping before you’ve finished measuring them\nMissing values, known as “null” values, are written in R as NA with no quotes, which is short for “not available”\nSo a vector of 4 population counts with the third value missing would look like\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nIf we try to take the mean of this vector we get NA?\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nHard to say what a calculation including NA should be\nSo most calculations return NA when NA is in the data\nCan tell many functions to remove the NA before calculating\nDo this using an optional argument, which is an argument that we don’t have to include unless we want to modify the default behavior of the function\nAdd optional arguments by providing their name (na.rm), =, and the value that we want those arguments to take (TRUE)\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Nulls in Vectors.\n\n\n\nWorking with multiple vectors\n\nBuild on example where we have information on states and population counts by adding areas\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nVector math\n\nWe can divide the count vector by the area vector to get a vector of the density of individuals in that area\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nThis works because when we divide vectors, R divides the first value in the first vector by the first value in the second vector, then divides the second values in each vector, and so on\nElement-wise: operating on one element at a time\n\n\n\nFiltering\n\nSubsetting or “filtering” is done using []\nLike with slicing, the [] say “give me a piece of something”\nSelects parts of vectors based on “conditions” not position\nGet the density values in site a\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\n== is how we indicate “equal to” in most programming languages.\nNot =. = is used for assignment.\nCan also do “not equal to”\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nNumerical comparisons like greater or less than\nSelect states that meet with some restrictions on density\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nCan subset a vector based on itself\nIf we want to look at the densities greater than 3\ndensity is both the vector being subset and part of the condition\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nMultiple vectors can be used together to perform element-wise math, where we do the same calculation for each position in the vectors\nWe can also filter the values in vector based on the values in another vector or itself\n\n\nDo Shrub Volume Vectors 1-3."
  },
  {
    "objectID": "intro-r.html",
    "href": "intro-r.html",
    "title": "Basic R",
    "section": "",
    "text": "Basic expressions\nAn expression is a set of commands that returns a value. For example let’s use R to convert a mass of 50 kg into pounds by multiplying it by 2.2.\nClick Run Code to run the following R code.\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\n50 * 2.2 is an expression\nThat number 110 that results from running the code is the resulting value\nTry changing the code above by changing the number 50 to other weights in pounds to find out the equivalent weight in kilograms\n\n\n\nVariables\n\nTo save the values we calculate for later use we use variables\nA variable is a name that has a value associated with it\nWe can assign a value to a variable using &lt;-\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nNo value is shown when we run this code because the value is stored in the variable\nTo see the value we can run the name of the variable on it’s own\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nThe variable works just like the value itself\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nThe value associate with the variable won’t change unless you assign a new value to it directly\nIf we do a calculation with the variable and check it’s value again\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nWe can see that it doesn’t change\nIf we want to update the variable we have to store a new value\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nHere is a small program that converts a mass in kilograms to a mass in grams and then prints out the resulting value.\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\nCreate similar code to convert a mass in pounds to a mass kilograms. * Create a variable to store a body mass in pounds. Assign this variable a value of 3.5 (an appropriate mass for a Sylvilagus audubonii). * Convert the variable from body mass in pounds to body mass in kilograms (by dividing it by 2.2046), and assign it to a new variable. * Print the value of the new variable to the screen.\n\n\n\n\nFunctions\n\nA function is a complicated expression.\nCommand that returns a value\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nA function call is composed of two parts.\n\nName of the function\nArguments that the function requires to calculate the value it returns.\nsqrt() is the name of the function, and 49 is the argument.\n\nWe can also pass variables as the argument\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nAnother function that we’ll use a lot is str()\nAll values and therefore all variables have types\nstr, short for “structure”, lets us look at them\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nAnother data type is for text data\nWe right text inside of quotation makes\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nIf we look at the structure of some text we see that it is type character\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nFunctions can take multiple arguments.\n\nRound weight_lb to one decimal place\nTyping round() shows there are two arguments\nNumber to be rounded and number of digits\n\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nFunctions return values, so as with other values and expressions, if we don’t save the output of a function then there is no way to access it later\nIt is common to forget this when dealing with functions and expect the function to have changed the value of the variable\nBut looking at weight_lb we see that it hasn’t been rounded\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nTo save the output of a function we assign it to a variable.\n\n🟡 Loading\n  webR...\n\n  \n  \n    \n  \n\n\n\n\n\nDo Exercise 4.1-4.3 - Built-in Functions"
  }
]